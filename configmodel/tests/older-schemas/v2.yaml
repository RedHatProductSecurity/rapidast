# This is a verbose configuration template. A lot of value do not need to be present, for most configuration.
# See "config-template.yaml" for a simpler configuration file.
# All the values are optional (except `config.configVersion`): if a key is missing, it will mean either "disabled" or a sensible default will be selected

config:
  # WARNING: `configVersion` indicates the schema version of the config file.
  # This value tells RapiDAST what schema should be used to read this configuration.
  # Therefore you should only change it if you update the configuration to a newer schema
  # It is intended to keep backward compatibility (newer RapiDAST running an older config)
  configVersion: 2

  # all the results of all scanners will be stored under that location
  base_results_dir: "./results"

  # Import a particular environment, and inject it for each scanner
  environ:
    envFile: "path/to/env/file"

# `application` contains data related to the application, not to the scans.
application:
  shortName: "MyApp-1.0"
  url: "<Mandatory. root URL of the application>"

# `general` is a section that will be applied to all scanners.
# Any scanner can override a value by creating an entry of the same name in their own configuration
general:

  # remove `proxy` entirely for direct connection
  proxy:
    proxyHost: "<hostname>"
    proxyPort: "<port>"

  # remove `authentication` entirely for unauthenticated connection
  authentication:
    type: "oauth2_rtoken"
    parameters:
      client_id: "cloud-services"
      token_endpoint: "<token retrieval URL>"
      rtoken_var_name: "RTOKEN"     # referring to a env defined in general.environ.envFile
    # Other types of authentication:
    #type: "http_basic"
    #parameters:
    #  username: "user"
    #  password: "mypassw0rd"
    #type: "cookie"
    #parameters:
    #  name: "cookie name"
    #  value: "cookie value"


  container:
    # one of: podman, docker, flatpak, none
    # not all scanner may support all types
    # currently supported: `podman` and `none`
    type: "podman"


scanners:
  zap:
  # define a scan through the ZAP scanner
    apiScan:
      target: "<optional, if different from application.url>"
      apis:
        apiUrl: "<URL to openAPI>"
        # alternative: apiFile: "<local path to openAPI file>"

    spider:
      maxDuration: 0 # in minutes, default: 0 unlimited
      url: ""        # url to start spidering from, default: application.url set above

    spiderAjax:
      maxDuration: 0 # in minutes, default: 0 unlimited
      url: ""        # url to start spidering from, default: application.url set above
      browserId: firefox-headless

    passiveScan:
      # optional comma-separated list of passive rules to disable
      # Use https://www.zaproxy.org/docs/alerts/ to match rule with its ID
      disabledRules: "2,10015,10027,10096,10024"

    activeScan:
      # If no policy is chosen, a default ("API-scan-minimal") will be selected
      # The list of policies can be found in scanners/zap/policies/
      policy:  "API-scan-minimal"

    container:
      parameters:
        image: "docker.io/owasp/zap2docker-stable:latest" # for type such as podman
        executable: "zap.sh"  # for Linux
        # executable: "/Applications/OWASP ZAP.app/Contents/Java/zap.sh"    # for MacOS

    # Defaults to False, set True do update ZAP's plugins
    updateAddons: True

    report:
      format: ["json"]
      # format: ["json","html","sarif"]  # default: "json" only

# Other scanners to be defined(TBD)
