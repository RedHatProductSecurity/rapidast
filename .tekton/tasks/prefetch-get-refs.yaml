---
# yaml-language-server: $schema=https://json.schemastore.org/yamllint.json
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: prefetch-get-refs
spec:
  description: Fetches references for Cachi2 prefetch dependencies
  results:
    - name: PREFETCH_CACHI2_ARTIFACT
      description: The OCI artifact containing the Cachi2 prefetched dependencies
  params:
    - name: SNAPSHOT
      description: The JSON string of the Snapshot
  steps:
    - name: prefetch-get-refs
      image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
      env:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: KONFLUX_COMPONENT_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['appstudio.openshift.io/component']
        - name: PREFETCH_CACHI2_ARTIFACT_FILE
          value: $(results.PREFETCH_CACHI2_ARTIFACT.path)
      script: |
        #!/bin/bash
        set -euo pipefail

        echo "Starting prefetch-get-refs task..."

        # Extract the container image for the specified component from the snapshot
        COMPONENT_CONTAINER_IMAGE=$(jq -r --arg COMPONENT_NAME "$KONFLUX_COMPONENT_NAME" '
          .components[] | select(.name == $COMPONENT_NAME) | .containerImage' <<< "$SNAPSHOT")

        if [[ -z "$COMPONENT_CONTAINER_IMAGE" || "$COMPONENT_CONTAINER_IMAGE" == "null" ]]; then
            echo "Error: Could not determine container image for component: $KONFLUX_COMPONENT_NAME"
            exit 1
        fi

        echo "Component container image: $COMPONENT_CONTAINER_IMAGE"

        echo "Downloading Cosign metadata..."
        cosign download attestation "$COMPONENT_CONTAINER_IMAGE" > cosign_metadata.json || {
            echo "Error: Failed to download Cosign metadata"
            exit 1
        }

        # Extract the OCI storage location for prefetched dependencies
        OCI_STORAGE_LOCATION=$(jq -r '
            .payload | @base64d | fromjson | .predicate.buildConfig.tasks[] |
            select(.name == "prefetch-dependencies") | .invocation.parameters.ociStorage // empty' cosign_metadata.json)

        if [[ -z "$OCI_STORAGE_LOCATION" ]]; then
            echo "OCI storage location for prefetching dependencies not found"
            exit
        fi

        echo "OCI storage location: $OCI_STORAGE_LOCATION"

        # Fetch the first available OCI storage digest
        OCI_STORAGE_DIGEST=$(oras discover "$OCI_STORAGE_LOCATION" | grep -E 'sha256:[a-f0-9]{64}' | head -1)

        if [[ -z "$OCI_STORAGE_DIGEST" ]]; then
            echo "Error: Failed to retrieve OCI storage digest"
            exit 1
        fi

        echo "OCI storage digest: $OCI_STORAGE_DIGEST"

        # Fetch the CACHI2 artifact digest from the OCI storage
        CACHI2_ARTIFACT_DIGEST=$(oras manifest fetch "$OCI_STORAGE_DIGEST" | jq -r '
            .layers[] | select(.annotations["org.opencontainers.image.title"] == "CACHI2_ARTIFACT") | .digest // empty')

        if [[ -z "$CACHI2_ARTIFACT_DIGEST" ]]; then
            echo "No matching CACHI2 artifact found"
            exit
        else
            OCI_REPOSITORY=$(echo "$OCI_STORAGE_DIGEST" | sed 's/@.*//')
            FULL_OCI_ARTIFACT_PATH="$OCI_REPOSITORY@$CACHI2_ARTIFACT_DIGEST"
            echo "Full OCI artifact path: $FULL_OCI_ARTIFACT_PATH"
        fi

        # Write the result to Tekton results file
        echo -n "oci:$FULL_OCI_ARTIFACT_PATH" > "$PREFETCH_CACHI2_ARTIFACT_FILE"
